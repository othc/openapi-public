{
  "openapi": "3.0.0",
  "info": {
    "version": "0.1.0",
    "title": "TrueAccord Retain Inbound API",
    "description": "TrueAccord Retain Inbound API"
  },
  "tags": [
    {
      "name": "Account Placements",
      "x-displayName": "Account Placements",
      "description": "Place new accounts"
    },
    {
      "name": "Account Updates",
      "x-displayName": "Account Updates",
      "description": "Update previously placed accounts"
    },
    {
      "name": "Account Retractions",
      "x-displayName": "Account Retractions",
      "description": "Retract previously placed accounts"
    },
    {
      "name": "Payments",
      "x-displayName": "Payments",
      "description": "Notify us of payments made on accounts"
    }
  ],
  "paths": {
    "/inbound/v1/placement": {
      "post": {
        "summary": "Add Accounts",
        "description": "Account placements and updates. When an account is placed, we will immediately start communications with the account, and will cease communications when the account is retracted. A maximum of 175 accounts/records can be placed in a single request.",
        "tags": [
          "Account Placements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlacementInformation"
                },
                "minItems": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payload was successfully parsed - refer to message for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - refer to message and/or FailedRecords for additional information. Requests can fail for a variety of reasons, e.g. invalid JSON formatting, invalid or required fields not being present.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse500"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Account Information",
        "description": "Account placements patch. Patch only updates account information for already placed accounts. It can have the same body as the POST request, but the only required fields are: accountNumber, accountNamespace, accountRelationship, and the field to update with the new value. Note that when certain fields are being updated, additional fields become required - for example, updating a phone number requires that the associated SMS consent field also be present in the request. A maximum of 175 accounts/records can be updated in a single request.",
        "tags": [
          "Account Updates"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlacementInformationPatch"
                },
                "minItems": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payload was successfully parsed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - refer to message and/or FailedRecords for additional information. Requests can fail for a variety of reasons, e.g. invalid JSON formatting, invalid or required fields not being present.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse500"
                }
              }
            }
          }
        }
      }
    },
    "/inbound/v1/retraction": {
      "post": {
        "summary": "Retract Account",
        "description": "Account retractions - when an account is retracted the Retain system stops sending all communications to consumer. Please note, that for multi account/record retraction requests, if one or more of the accounts cannot be found in our system (e.g. an incorrect accountNumber or accountNamespace is provided), while other accounts in the request can be found, the validly identified accounts will be retracted and the response will indicate the accounts that were not properly identified in the request. A maximum of 175 accounts/records can be retracted in a single request.",
        "tags": [
          "Account Retractions"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RetractionInformation"
                },
                "minItems": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponsePaymentRetraction200"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - refer to message and/or FailedRecords for additional information. Requests can fail for a variety of reasons, e.g. invalid JSON formatting, invalid or required fields not being present.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse500"
                }
              }
            }
          }
        }
      }
    },
    "/inbound/v1/payments": {
      "post": {
        "summary": "Add Payments to Account",
        "description": "Account payments - payments provide feedback to the Retain system to make Heartbeat smarter. Please provide all of the unique payments for accounts placed, meaning only send one payment record for each payment received. Also, only send payments received during the time the account was placed with Retain. It is important that the Category Code is provided correctly, and that required fields are present. Please note, that for multi account/record payment requests, if one or more of the accounts cannot be found in our system (e.g. an incorrect accountNumber or accountNamespace is provided), while other accounts in the request can be found, the validly identified accounts will have their payments recorded and the response will indicate the accounts that were not properly identified in the request. A maximum of 175 accounts/records can be included in a single request.",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentsInformation"
                },
                "minItems": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponsePaymentRetraction200"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - refer to message and/or FailedRecords for additional information. Requests can fail for a variety of reasons, e.g. invalid JSON formatting, invalid or required fields not being present.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundAPIResponse500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    },
    "schemas": {
      "PlacementInformation": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account number used to uniquely identify each customer. Only last four digits are shown in our content. Avoid sending credit card PANs."
          },
          "accountNamespace": {
            "type": "string",
            "description": "Differentiates accounts across geographic regions or business units. In combination with accountNumber, the accountNamespace creates a two-part identifier (key) in our system."
          },
          "accountRelationship": {
            "type": "string",
            "enum": ["SIGNER"],
            "example": "SIGNER",
            "description": "The account relationship of the person named in this placement. Must be SIGNER."
          },
          "accountOpenDate": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "The date the account was originally opened (mm/dd/yyyy)"
          },
          "brandId": {
            "type": "string",
            "format": "uuid",
            "description": "An ID for the brand to be represented. This enables different first-party theming for different brands under one client relationship."
          },
          "productType": {
            "type": "string",
            "enum": [
              "AUTO",
              "BNPL",
              "CARD",
              "DDA",
              "FITNESS",
              "HEL",
              "HELOC",
              "PRESETTLEMENT",
              "POSTSETTLEMENT",
              "POSTCHARGEOFF",
              "UNSECURED",
              "UTILITY"
            ],
            "description": "Product type of the account. Used to select Product specific email templates."
          },
          "productDescription": {
            "type": "string",
            "description": "This identifies the financial product to the consumer in content. Sample sentence: \"you have a delinquent balance on your [productDescription].\""
          },
          "dateAssigned": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "The date the account was placed with Retain (mm/dd/yyyy)"
          },
          "expectedRetractionDate": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "An estimated date that the account will be retracted from TrueAccord (based on charge off, or other business rule). This enables additional monitoring and reporting (mm/dd/yyyy)"
          },
          "firstName": {
            "type": "string",
            "description": "Customer First Name"
          },
          "lastName": {
            "type": "string",
            "description": "Customer Last Name"
          },
          "middleName": {
            "type": "string",
            "description": "Customer Middle Name."
          },
          "email1": {
            "type": "string",
            "format": "email",
            "description": "Customer email address - primary."
          },
          "email2": {
            "type": "string",
            "format": "email",
            "description": "Customer email address - additional."
          },
          "email3": {
            "type": "string",
            "format": "email",
            "description": "Customer email address - additional."
          },
          "telephone1": {
            "type": "string",
            "description": "First telephone number for the customer (in a 10-digit format e.g. 8666112731)",
            "pattern": "^\\d{10}$"
          },
          "telephoneType1": {
            "type": "string",
            "enum": [
              "HOME",
              "WORK",
              "CELL",
              "FAX",
              "BUSINESS"
            ],
            "description": "Type of the first telephone number"
          },
          "telephoneSMSConsent1": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ],
            "description": "Indicates whether client has consent for SMS communications with this customer, at this number."
          },
          "telephone2": {
            "type": "string",
            "description": "Second telephone number for the customer (in a 10-digit format e.g. 8666112731)",
            "pattern": "^\\d{10}$"
          },
          "telephoneType2": {
            "type": "string",
            "enum": [
              "HOME",
              "WORK",
              "CELL",
              "FAX",
              "BUSINESS"
            ],
            "description": "Type of the second telephone number"
          },
          "telephoneSMSConsent2": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ],
            "description": "Indicates whether client has consent for SMS communications with this customer, at this number."
          },
          "telephone3": {
            "type": "string",
            "description": "Third telephone number for the customer (in a 10-digit format e.g. 8666112731)",
            "pattern": "^\\d{10}$"
          },
          "telephoneType3": {
            "type": "string",
            "enum": [
              "HOME",
              "WORK",
              "CELL",
              "FAX",
              "BUSINESS"
            ],
            "description": "Type of the third telephone number"
          },
          "telephoneSMSConsent3": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ],
            "description": "Indicates whether client has consent for SMS communications with this customer, at this number."
          },
          "addressLine1": {
            "type": "string",
            "description": "The first line of the address for the customer. Include building number and street name. Separate from ‘addressLine2’, ‘city’, ‘state’ and ‘zipcode’."
          },
          "addressLine2": {
            "type": "string",
            "description": "The second line of the address for the customer. Include apartment or suite number. Separate from ‘addressLine1’, ‘city’, ‘state’ and ‘zipcode’."
          },
          "addressLine3": {
            "type": "string",
            "description": "The third line of the address for the customer. Separate from ‘addressLine1’, ‘addressLine2’, ‘city’, ‘state’ and ‘zipcode’."
          },
          "addressType": {
            "type": "string",
            "enum": [
              "HOME",
              "WORK"
            ],
            "description": "The type of address transmitted in this record (ex. HOME, WORK)"
          },
          "city": {
            "type": "string",
            "description": "The city for the customer."
          },
          "state": {
            "type": "string",
            "description": "The state code for the customer as two-letter abbreviation (e.g. CA, NY, etc.)."
          },
          "zipcode": {
            "type": "string",
            "description": "The 5 digit ZIP code for the customer.",
            "pattern": "^\\d{5}$"
          },
          "totalAmountDue": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount that the customer owes on the account (Total Delinquent Amount + Current Amount Due). Amount is in cents."
          },
          "currentAmountDue": {
            "type": "integer",
            "format": "int64",
            "description": "Amount currently due for this billing period (ignoring Delinquent Amount). Amount is in cents."
          },
          "currentBalance": {
            "type": "integer",
            "format": "int64",
            "description": "The entire balance of the account, regardless of Total Amount Due in this billing period. Amount is in cents."
          },
          "totalDelinquentAmount": {
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The amount currently delinquent on the account. Amount is in cents."
          },
          "delinquencyDate": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "Date that account became delinquent (this is the Due Date of the last missed payment in the content) (mm/dd/yyyy)"
          },
          "cyclesDelinquent": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "The numbers of cycles that the account is delinquent (number > 0). Used to select Cycle specific email templates."
          },
          "campaignId": {
            "type": "string",
            "format": "uuid",
            "description": "An ID referencing the Campaigns communication this customer is targeted for. Client Success Manager or Implementation Manager will provide you with the relevant ID(s) to use."
          },
          "displayAccountNumberLast4": {
            "type": "string",
            "description":"Alternate 4 digit display number that will be used in Content if using the last 4 digits of provided Account Number will not be useful/recognizable to customers."
          },
          "customerNumber": {
            "type":  "string",
            "description": "Optional number used to group accounts for the identified Customer, if required."
          },
          "originalCreditor": {
            "type":  "string",
            "description": "Name of the original creditor for accounts that were previously owned by a different creditor. This field is used to populate content associated with Pre-Settlement and Post-Settlement product types."
          },
          "currentCreditor": {
            "type":  "string",
            "description": "Name of current creditor. This field is used to populate content associated with Pre-Settlement and Post-Settlement product types."
          },
          "originalAccountNumber": {
            "type":  "string",
            "description": "Last four digits of the Original Account Number that was assigned by original creditor. This field is used to populate content associated with Pre-Settlement and Post-Settlement product types."
          }
        },
        "required": [
          "accountNumber",
          "accountNamespace",
          "accountRelationship",
          "accountOpenDate",
          "brandId",
          "productType",
          "productDescription",
          "dateAssigned",
          "expectedRetractionDate",
          "firstName",
          "lastName",
          "email1",
          "telephone1",
          "telephoneType1",
          "telephoneSMSConsent1",
          "addressLine1",
          "addressType",
          "city",
          "state",
          "zipcode",
          "totalDelinquentAmount",
          "delinquencyDate",
          "cyclesDelinquent"
        ]
      },
      "PlacementInformationPatch": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account number of the account to update. accountNumber cannot be updated."
          },
          "accountNamespace": {
            "type": "string",
            "description": "The accountNamespace that this account was originally placed with. accountNamespace cannot be updated."
          },
          "accountRelationship": {
            "type": "string",
            "enum": ["SIGNER"],
            "default": "SIGNER",
            "description": "The accountRelationship that this account was originally placed with. accountRelationship cannot be updated."
          },
          "accountOpenDate": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "The date the account was originally opened (mm/dd/yyyy)"
          },
          "brandId": {
            "type": "string",
            "format": "uuid",
            "description": "An ID representing the brand they want us to represent. This allows us to use different first-party messaging and themes for different brands. We will provide you a set to use."
          },
          "productType": {
            "type": "string",
            "enum": [
              "AUTO",
              "BNPL",
              "CARD",
              "DDA",
              "FITNESS",
              "HEL",
              "HELOC",
              "PRESETTLEMENT",
              "POSTSETTLEMENT",
              "POSTCHARGEOFF",
              "UNSECURED",
              "UTILITY"
            ],
            "description": "Product type of the account."
          },
          "productDescription": {
            "type": "string",
            "description": "This identifies the financial product to the consumer in content. Sample sentence: \"you have a delinquent balance on your [product description].\" If the productDescription is being updated, the productType must also be provided."
          },
          "dateAssigned": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "The date the account was placed with TrueAccord (mm/dd/yyyy)"
          },
          "expectedRetractionDate": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "An estimated date that the account will be retracted from TrueAccord (based on charge off, or other business rule). This enables additional monitoring and reporting (mm/dd/yyyy)"
          },
          "firstName": {
            "type": "string",
            "description": "Customer First Name"
          },
          "lastName": {
            "type": "string",
            "description": "The last name for this demographic entry"
          },
          "middleName": {
            "type": "string",
            "description": "Customer Last Name"
          },
          "email1": {
            "type": "string",
            "format": "email",
            "description": "Customer email address - primary."
          },
          "email2": {
            "type": "string",
            "format": "email",
            "description": "Customer email address - additional."
          },
          "email3": {
            "type": "string",
            "format": "email",
            "description": "Customer email address - additional."
          },
          "telephone1": {
            "type": "string",
            "description": "First telephone number for the customer (in a 10-digit format e.g. 8666112731). If the telephone number is being updated, the telephoneSMSConsent value must also be provided.",
            "pattern": "^\\d{10}$"
          },
          "telephoneType1": {
            "type": "string",
            "enum": [
              "HOME",
              "WORK",
              "CELL",
              "FAX",
              "BUSINESS"
            ],
            "description": "Type of the first telephone number"
          },
          "telephoneSMSConsent1": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ],
            "description": "Indicates whether client has consent for SMS communications with this customer, at this number. If the telephoneSMSConsent is being updated, the associated phone number must also be provided."
          },
          "telephone2": {
            "type": "string",
            "description": "Second telephone number for the customer (in a 10-digit format e.g. 8666112731). If the telephone number is being updated, the telephoneSMSConsent value must also be provided.",
            "pattern": "^\\d{10}$"
          },
          "telephoneType2": {
            "type": "string",
            "enum": [
              "HOME",
              "WORK",
              "CELL",
              "FAX",
              "BUSINESS"
            ],
            "description": "Type of the second telephone number"
          },
          "telephoneSMSConsent2": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ],
            "description": "Indicates whether client has consent for SMS communications with this customer, at this number. If the telephoneSMSConsent is being updated, the associated phone number must also be provided."
          },
          "telephone3": {
            "type": "string",
            "description": "Third telephone number for the customer (in a 10-digit format e.g. 8666112731). If the telephone number is being updated, the telephoneSMSConsent value must also be provided.",
            "pattern": "^\\d{10}$"
          },
          "telephoneType3": {
            "type": "string",
            "enum": [
              "HOME",
              "WORK",
              "CELL",
              "FAX",
              "BUSINESS"
            ],
            "description": "Type of the third telephone number"
          },
          "telephoneSMSConsent3": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ],
            "description": "Indicates whether client has consent for SMS communications with this customer, at this number. If the telephoneSMSConsent is being updated, the associated phone number must also be provided."
          },
          "addressLine1": {
            "type": "string",
            "description": "The first line of the address for the customer. Include building number and street name. Separate from ‘addressLine2’, ‘city’, ‘state’ and ‘zipcode’."
          },
          "addressLine2": {
            "type": "string",
            "description": "The second line of the address for the customer. Include apartment or suite number. Separate from ‘addressLine1’, ‘city’, ‘state’ and ‘zipcode’."
          },
          "addressLine3": {
            "type": "string",
            "description": "The third line of the address for the customer. Separate from ‘addressLine1’, ‘addressLine2’, ‘city’, ‘state’ and ‘zipcode’."
          },
          "addressType": {
            "type": "string",
            "enum": [
              "HOME",
              "BUSINESS"
            ],
            "description": "The type of address transmitted in this record (ex. HOME, BUSINESS)"
          },
          "city": {
            "type": "string",
            "description": "The city for the customer."
          },
          "state": {
            "type": "string",
            "description": "The state code for the customer as two-letter abbreviation (e.g. CA, NY, etc.)."
          },
          "zipcode": {
            "type": "string",
            "description": "The 5 digit ZIP code for the customer.",
            "pattern": "^\\d{5}$"
          },
          "totalAmountDue": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount that the customer owes on the account (Total Delinquent Amount + Current Amount Due). Amount is in cents."
          },
          "currentAmountDue": {
            "type": "integer",
            "format": "int64",
            "description": "Amount currently due for this billing period (ignoring Delinquent Amount). Amount is in cents."
          },
          "currentBalance": {
            "type": "integer",
            "format": "int64",
            "description": "The entire balance of the account, regardless of Total Amount Due in this billing period. Amount is in cents."
          },
          "totalDelinquentAmount": {
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The current delinquent amount on the account. Amount is in cents."
          },
          "delinquencyDate": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "Date that account became delinquent (mm/dd/yyyy)"
          },
          "cyclesDelinquent": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "The numbers of cycles that the account is delinquent (number > 0). Used to select Cycle specific email templates."
          },
          "displayAccountNumberLast4": {
            "type": "string",
            "description":"Alternate 4 digit display number that will be used in Content if using the last 4 digits of provided Account Number will not be useful/recognizable to customers."
          },
          "customerNumber": {
            "type":  "string",
            "description": "Optional number used to group accounts for the identified Customer, if required."
          },
          "originalCreditor": {
            "type":  "string",
            "description": "Name of the original creditor for accounts that were previously owned by a different creditor. This field is used to populate content associated with Pre-Settlement and Post-Settlement product types. If this value is being updated, the productType, originalAccountNumber, and currentCreditor are also required."
          },
          "currentCreditor": {
            "type":  "string",
            "description": "Name of current creditor. This field is used to populate content associated with Pre-Settlement and Post-Settlement product types. If this value is being updated, the productType, originalAccountNumber, and originalCreditor are also required."
          },
          "originalAccountNumber": {
            "type":  "string",
            "description": "Last four digits of the Original Account Number that was assigned by original creditor. This field is used to populate content associated with Pre-Settlement and Post-Settlement product types. If this value is being updated, the productType, originalCreditor, and currentCreditor are also required."
          }
        },
        "required": [
          "accountNumber",
          "accountNamespace",
          "accountRelationship"
        ]
      },
      "RetractionInformation": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account number of account to retract."
          },
          "accountNamespace": {
            "type": "string",
            "description": "accountNamespace that the account to retract was originally placed with."
          },
          "recallReason": {
            "type": "string",
            "enum": [
              "PAID",
              "BANKRUPT",
              "DISPUTED",
              "CLOSED",
              "CAMPAIGN_ENDED"
            ],
            "description": "Reason that the account is being retracted."
          }
        },
        "required": [
          "accountNumber",
          "accountNamespace",
          "recallReason"
        ]
      },
      "PaymentsInformation": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account number of account for which to record the payment."
          },
          "accountNamespace": {
            "type": "string",
            "description": "accountNamespace that the account was originally placed with."
          },
          "paymentDescription": {
            "type": "string",
            "description": "Free-form description of payment."
          },
          "paymentAmount": {
            "type": "integer",
            "format": "int64",
            "description": "Amount of payment made. Amount is in cents."
          },
          "transactionDate": {
            "type": "string",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$",
            "description": "Date the payment occurred (mm/dd/yyyy)."
          },
          "categoryCode": {
            "type": "string",
            "enum": [
              "DEBIT",
              "PAYMENT",
              "OTHER",
              "OTHER CREDIT"
            ],
            "description": "Type of transaction (Debit, Payment, Other Credit)"
          }
        },
        "required": [
          "accountNumber",
          "accountNamespace",
          "paymentAmount",
          "paymentDescription",
          "transactionDate",
          "categoryCode"
        ]
      },
      "InboundAPIResponse200": {
        "type": "object",
        "properties": {
          "ClientId": {
            "type": "string",
            "description": "Client Id"
          },
          "Status": {
            "type": "string",
            "default": "SUCCESS",
            "description": "Response status (SUCCESS)"
          },
          "Message": {
            "type": "string",
            "default": "Inbound process ends without errors",
            "description": "Message description"
          },
          "ProcessedRecords": {
            "type": "integer",
            "format": "int32",
            "description": "Number or records processed"
          }
        },
        "required": [
          "ClientId",
          "Status",
          "Message",
          "ProcessedRecords"
        ]
      },
      "InboundAPIResponsePaymentRetraction200": {
        "type": "object",
        "properties": {
          "ClientId": {
            "type": "string",
            "description": "Client Id"
          },
          "Status": {
            "type": "string",
            "default": "SUCCESS",
            "description": "Response status (SUCCESS)"
          },
          "Message": {
            "type": "string",
            "default": "Inbound process ends without errors",
            "description": "Message description"
          },
          "ProcessedRecords": {
            "type": "integer",
            "format": "int32",
            "description": "Number or records processed"
          },
          "FailedRecords": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FailedRecord"
            }
          }
        },
        "required": [
          "ClientId",
          "Status",
          "Message",
          "ProcessedRecords"
        ]
      },
      "InboundAPIResponse400": {
        "type": "object",
        "properties": {
          "ClientId": {
            "type": "string",
            "description": "Client Id"
          },
          "Status": {
            "type": "string",
            "default": "ERROR",
            "description": "Response status (ERROR)"
          },
          "Message": {
            "type": "string",
            "description": "Message description"
          },
          "ProcessedRecords": {
            "type": "integer",
            "format": "int32",
            "description": "Number or records processed"
          },
          "FailedRecords": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FailedRecord"
            }
          }
        },
        "required": [
          "Status",
          "Message"
        ]
      },
      "InboundAPIResponse500": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "default": "FAILURE",
            "description": "Response status (FAILURE)"
          },
          "Message": {
            "type": "string",
            "description": "Message description"
          }
        },
        "required": [
          "Status",
          "Message"
        ]
      },

      "FailedRecord": {
        "type": "object",
        "properties": {
          "AccountNumber": {
            "type": "string",
            "description": "AccountNumber of the record that has failed"
          },
          "AccountNamespace": {
            "type": "string",
            "description": "AccountNamespace of the record that has failed"
          },
          "Message": {
            "type": "string",
            "description": "Error Detail"
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "servers": [
    {
      "description": "SwaggerHub API Auto Mocking",
      "url": "https://virtserver.swaggerhub.com/felipediazc/integration/0.0.2"
    }
  ]
}
